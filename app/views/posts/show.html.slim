section#main.post
  section#article
    #title
      .bg style='background-image: url("/assets/posts/1");'
      .container
        .icons
          = image_tag 'user_icons/ozaki'
          = image_tag 'user_icons/yamada'
        .text
          h1
            | 僕らの仕事､どこまで｢人工知能｣が奪うのか
    #summary
      p
        | 「プロフェッショナル対談」は、経営共創基盤のマネージングディレクターである塩野誠氏が、次の時代を切り開くリーダーと対談し、キャリアについてのホンネを引き出すコーナー。今回は特別編。今年、ソフトバンクが家庭用ロボット「Pepper」を発表するなど、ロボットは、加速度的に進化を続けている。ロボットの技術が今後ますます発展し、人間の能力を超越したとき、どんな未来が待っているのか。刊行したばかりの『東大准教授に教わる「人工知能って、そんなことまでできるんですか？」』で対談した人工知能学の権威、東京大学の松尾豊准教授に、あらためて話を聞きました。今回はその前編です。
    #body
      .container
        h2
          | 自動運転、お掃除ロボット…中身は“賢いプログラム”
        p.first-person
          = image_tag 'user_icons/ozaki'
          | 最近はどんな業界でも、人工知能という言葉を耳にする機会が増えてきました。実際それがどんな仕組みでできていて、どう動いているのか。私を含めて、よく分からないという人も多いのではないかと思います。そもそも人工知能とは、コンピュータのプログラムなのでしょうか。
        p.second-person
          = image_tag 'user_icons/yamada'
          | そうです。プログラムにはいろいろな定義がありますが、人工知能に搭載されているのは「賢いことをやっているように見えるプログラム」という感じですね。ただ、中でやっていることはそれぞれ違います。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | たとえば「お掃除ロボット」ですと、周辺の環境を探索しながら、どういう経路で動いていくとゴミがなくなるかを計算して動作します。ある種の計画を先に立てて実行するもので、車のナビゲーションもこれに近いやり方です。将棋の場合は、この手を打つと相手はこう返してくるかもしれない、そのとき自分はどう打とうかを考える。シミュレーションを行ってベストな手を探す。未来のことを計画してシミュレーションし、もっとも良いと思える方法を探すというイメージですね。
        = image_tag 'posts/ai1'
        p.second-person
          = image_tag 'user_icons/yamada'
          | 状況によってどのルールが使われるかが異なりますが、それによっていろいろな状況に対応できるように、人間が設計していきます。部屋が違えば動きも変わってきますから、部屋の形に応じて動作を変えなさい、とプログラムされているわけです。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | たとえば、自動車の自動運転は非常に難しいと思います。人間なら免許が必要ですからね。状況がどんどん変化していく中でレーダが周囲の環境を認知して解析していくはずですが、走り出せば歩行者が飛び出してくるかもしれない。こうした部分も「こう来たら、こう返せ」のような形でプログラムされているのでしょうか？
        p.second-person
          = image_tag 'user_icons/yamada'
          | そうです。自動運転の場合、どの道をどう通るかを決めるのは、それほど難しくはありません。そこは普通のカーナビがやっているような処理ですから。
          br
          br
          | もっとも難度が高いのは状況の認識です。たとえば、子どもが飛び出したとか、他の車が止まって道をふさいだとか。それが日常的に起きる事象ならまだいいとして、事故は想定しないところから起きます。たとえば、道路に地割れがあったらどう対処するか、踏切が故障してバーが下りていないのに電車が通っていたらどうすればいいのか。何が起きているかを認識し、その状況の中で安全に車を動かす。ここがおそらくもっとも難しい部分です。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | ということは、認知がまずあって、認知をしたらコンピュータのプログラムが「こういう対応をしよう」と考えて動くということですか？
        p.second-person
          = image_tag 'user_icons/yamada'
          | そうですね。ルールはどんどん複雑になって、たとえば「この値とこの値の掛け算が一定以上ならこう反応を返せ」みたいな感じです。こうなるとルール自体、人間には理解できなくなりますが、実際は値のところはセンサー入力を使うような形で複雑化しています。ルールが複雑になると、動きはより賢くなっていくと考えていいでしょう。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | 松尾先生は、東京大学で人工知能に取り組んでいらっしゃいますが、具体的にどんな研究をされているのでしょうか。
        p.second-person
          = image_tag 'user_icons/yamada'
          | いろいろな観点がありますが、大きく分けると3つです。まず1つは、人工知能にはどんなデータが使えるのか、何が有用なのかを調べるデータ自身の研究です。ウェブの研究やビッグデータの研究が該当します。次はそのデータを使ってどんな方法でルールを作っていけばいいか。自動的にルールを学習する方法ですね。機械学習やデータ分析の研究です。そして3番目が、ルールを作るシステムや「アルゴリズム」を使って、どんな応用ができるかを考える。応用に関する研究です。データの入り口と処理、そして出口。こんなイメージでしょうか。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | ルールの作り方ですが、いま話題の「人工知能を使った将棋」でいうと、どんな方法で進めていくのでしょうか。
        h2
          | コンピュータに教えるのは「ふるまい」
        p.second-person
          = image_tag 'user_icons/yamada'
          | いちばん簡単なところから考えると、王手を指されたら逃げるというルールができます。将棋のプログラムを作るとしたら、最初に思いつくルールですよね。そして、次に考えることは、相手の駒が「王」の周囲に来たら逃げる。王手はされなくとも、近寄って来たら逃げる。もう少し進化させるとしたら、駒の数は相手が少なく自 分は多いほうがいいので、相手の駒が取れるときは取る。さらに「飛車」や「角」は大事な駒ですから、「歩」は取られてもいいが「飛車」と「角」は守る。相手の大事な駒は取る。
          br
          br
          | 次の段階は、いまの盤面は自分がどれくらい有利か不利かをスコアリング、つまり得点で表すこと。たとえば、自分が持っている駒の数から相手の駒の数を引く。そこに「飛車」や「角」が含まれていたら、3倍するような計算を行います。あるいは「王」の周りにいる相手の駒の位置を見て、距離が近ければマイナスするといった工夫をして、盤面のスコアを計算できるようにするわけです。
        = image_tag 'posts/ai2'
        p.first-person
          = image_tag 'user_icons/ozaki'
          | なるほど。その先は複雑な計算が入ってきそうですね。
        p.second-person
          = image_tag 'user_icons/yamada'
          | ええ。ここまで来ると、もっと難しいこともできるようになります。自分がこう打って相手がこう返したとき、スコアがどのくらい変わるかが計算できます。ここまで来ると、あとは何手先まで読むかの話ですね。3手先までなら、そこまでの自分と相手の手を想定してすべてのパターンを出し、それぞれのスコアを算出する。
          br
          br
          | これを「ミニマックス法」と言いますが、自分は評価関数のスコアを上げたい、大きくしたい。相手はこちらのスコアを小さくしたい。自分の選択肢はよいほうを取って、相手は自分のスコアが下がるような選択をしたとき、その中でもスコアがいちばんいい方法を選ぶ。平たく言うと、相手が最善と思える「手」を打ってきたときに、もっとも自分が有利になる「手」を考えることです。
        p.first-person
          = image_tag 'user_icons/ozaki'
          | なるほど。それでは、将棋や車の自動運転では、中でいろいろな計算式が動いていると考えていいのですね？
        p.second-person
          = image_tag 'user_icons/yamada'
          | そうです。いろいろなことが起こる確率の中で、実際にそれが起きてしまったときに、どれくらいまずいことになるか。そういった計算がたくさん行われて、システムの「ふるまい」が決まってきます。
        p.end
          | (了)
== render 'layouts/footer'